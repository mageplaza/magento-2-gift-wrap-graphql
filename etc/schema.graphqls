# Mageplaza
#
# NOTICE OF LICENSE
#
# This source file is subject to the Mageplaza.com license that is
# available through the world-wide-web at this URL:
# https://www.mageplaza.com/LICENSE.txt
#
# DISCLAIMER
#
# Do not edit or add to this file if you wish to upgrade this extension to newer
# version in the future.
#
# @category    Mageplaza
# @package     Mageplaza_GiftWrapGraphQl
# @copyright   Copyright (c) Mageplaza (https://www.mageplaza.com/)
# @license     https://www.mageplaza.com/LICENSE.txt

type Query {
    mpGiftWrapCategory (
        id: Int! @doc(description: "Specifies the category id to search for."),
    ): GiftWrapCategoryOutput @resolver(class: "Mageplaza\\GiftWrapGraphQl\\Model\\Resolver\\Get\\Category") @doc(description: "Searches for an item that matches the id.")
    mpGiftWrapCategories (
        filter: GiftWrapCategoryFilterInput @doc(description: "Identifies which fields to search for and return."),
        pageSize: Int = 20 @doc(description: "Specifies the maximum number of results to return at once. The default value is 20."),
        currentPage: Int = 1 @doc(description: "Specifies which page of results to return. The default value is 1.")
    ): GiftWrapCategoriesOutput @resolver(class: "Mageplaza\\GiftWrapGraphQl\\Model\\Resolver\\GetList\\Category") @doc(description: "Searches for items that match the criteria specified in the search and filter attributes.")
    mpGiftWrapWrapper (
        id: Int! @doc(description: "Specifies the wrapper id to search for."),
    ): GiftWrapWrapperOutput @resolver(class: "Mageplaza\\GiftWrapGraphQl\\Model\\Resolver\\Get\\Wrap") @doc(description: "Searches for an item that matches the id.")
    mpGiftWrapWrappers (
        filter: GiftWrapWrapperFilterInput @doc(description: "Identifies which fields to search for and return."),
        pageSize: Int = 20 @doc(description: "Specifies the maximum number of results to return at once. The default value is 20."),
        currentPage: Int = 1 @doc(description: "Specifies which page of results to return. The default value is 1.")
    ): GiftWrapWrappersOutput @resolver(class: "Mageplaza\\GiftWrapGraphQl\\Model\\Resolver\\GetList\\Wrap") @doc(description: "Searches for items that match the criteria specified in the search and filter attributes.")
}

type Mutation {
    mpGiftWrapWrapperSet (
        cart_id: String! @doc(description: "Specifies the quote mask id to search for and apply the gift wrap."),
        item_id: Int! @doc(description: "Specifies the item id to search for and apply the gift wrap.")
        wrap_id: Int! @doc(description: "Specifies what gift wrap will be applied.")
        message: String @doc(description: "Specifies what gift message will be applied.")
    ): GiftWrapItemOutput @resolver(class: "Mageplaza\\GiftWrapGraphQl\\Model\\Resolver\\Wrap\\SetWrap") @doc(description: "Set gift wrap for a specified item in the cart")
    mpGiftWrapWrapperRemove (
        cart_id: String! @doc(description: "Specifies the quote mask id to search for and remove the gift wrap."),
        item_id: Int! @doc(description: "Specifies the item id to search for and remove the gift wrap.")
    ): GiftWrapItemOutput @resolver(class: "Mageplaza\\GiftWrapGraphQl\\Model\\Resolver\\Wrap\\RemoveWrap") @doc(description: "Remove gift wrap from a specified item in the cart")
    mpGiftWrapWrapperSetAll (
        cart_id: String! @doc(description: "Specifies the quote mask id to search for and apply the gift wrap."),
        wrap_id: Int! @doc(description: "Specifies what gift wrap will be applied.")
        message: String @doc(description: "Specifies what gift message will be applied.")
    ): [GiftWrapItemOutput] @resolver(class: "Mageplaza\\GiftWrapGraphQl\\Model\\Resolver\\Wrap\\SetWrapAll") @doc(description: "Set gift wrap for a specified the cart")
    mpGiftWrapWrapperRemoveAll (
        cart_id: String! @doc(description: "Specifies the quote mask id to search for and remove the gift wrap."),
    ): [GiftWrapItemOutput] @resolver(class: "Mageplaza\\GiftWrapGraphQl\\Model\\Resolver\\Wrap\\RemoveWrapAll") @doc(description: "Remove gift wrap from a specified cart")
}

input GiftWrapCategoryFilterInput @doc(description: "Defines the filters to be used in the search. A filter contains at least one attribute, a comparison operator, and the value that is being searched for.") {
    category_id: FilterTypeInput
    name: FilterTypeInput
    status: FilterTypeInput
    description: FilterTypeInput
    store_id: FilterTypeInput
    customer_group: FilterTypeInput
    sort_order: FilterTypeInput
    created_at: FilterTypeInput
    updated_at: FilterTypeInput
}

input GiftWrapWrapperFilterInput @doc(description: "Defines the filters to be used in the search. A filter contains at least one attribute, a comparison operator, and the value that is being searched for.") {
    wrap_id: FilterTypeInput
    name: FilterTypeInput
    status: FilterTypeInput
    price_type: FilterTypeInput
    amount: FilterTypeInput
    description: FilterTypeInput
    image: FilterTypeInput
    category: FilterTypeInput
    sort_order: FilterTypeInput
    created_at: FilterTypeInput
    updated_at: FilterTypeInput
}

type GiftWrapCategoriesOutput {
    total_count: Int @doc(description: "The number of items returned.")
    items: [GiftWrapCategoryOutput] @doc(description: "An array of items that match the specified search criteria.")
    page_info: PageInfo @doc(description: "An object that includes the pageSize and currentPage values specified in the query.")
}

type GiftWrapWrappersOutput {
    total_count: Int @doc(description: "The number of items returned.")
    items: [GiftWrapWrapperOutput] @doc(description: "An array of items that match the specified search criteria.")
    page_info: PageInfo @doc(description: "An object that includes the pageSize and currentPage values specified in the query.")
}

type GiftWrapCategoryOutput {
    category_id: Int @doc(description: "Category ID that is used to identify the wrap category.")
    name: String @doc(description: "Category name.")
    status: Int @doc(description: "Category status.")
    description: String @doc(description: "Category description.")
    store_id: String @doc(description: "Specifies which store the category is available at.")
    customer_group: String @doc(description: "Specifies which customer group the category is applicable to.")
    sort_order: Float @doc(description: "The order in which the option is displayed.")
    created_at: String @doc(description: "Timestamp indicating when the entity was created.")
    updated_at: String @doc(description: "Timestamp indicating when the entity was updated.")
}

interface GiftWrapWrapperInterface @typeResolver(class: "Mageplaza\\GiftWrapGraphQl\\Model\\Resolver\\WrapperInterfaceTypeResolver") {
    wrap_id: Int @doc(description: "Gift wrap ID that is used to identify the gift wrap.")
    name: String @doc(description: "Wrapper name.")
    status: Int @doc(description: "Status of the wrapper.")
    price_type: Int @doc(description: "Price type: 1 for fixed, 2 for by quantity.")
    amount: Float @doc(description: "Amount of the gift wrap.")
    description: String @doc(description: "Description of the wrapper.")
    image: String @doc(description: "Relative image path.")
    category: String @doc(description: "Specifies which category the gift wrap belongs to.")
    sort_order: Float @doc(description: "The order in which the option is displayed.")
    created_at: String @doc(description: "Timestamp indicating when the entity was created.")
    updated_at: String @doc(description: "Timestamp indicating when the entity was updated.")
}

type GiftWrapWrapperOutput implements GiftWrapWrapperInterface

type GiftWrapDetailsOutput implements GiftWrapWrapperInterface {
    price: String @doc(description: "Price of the gift wrap in formatted currency.")
    use_gift_message: Boolean @doc(description: "Is gift message added into the wrapper?")
    gift_message: String @doc(description: "Gift message content.")
    gift_message_fee: Float @doc(description: "Gift message fee.")
    all_cart: Boolean @doc(description: "Is the wrapper applied for the whole cart?")
}

type GiftWrapItemOutput {
    item_id: Int @doc(description: "Item ID.")
    sku: String @doc(description: "Product SKU.")
    qty: Float @doc(description: "Product quantity in cart.")
    name: String @doc(description: "Product name.")
    price: Float @doc(description: "Product price.")
    product_type: String @doc(description: "Product type.")
    quote_id: String @doc(description: "Quote ID.")
    mp_gift_wrap_data: GiftWrapDetailsOutput @doc(description: "Gift wrap information of the item.")
}

type PageInfo {
    pageSize: Int @doc(description: "How many items should show on the page.")
    currentPage: Int @doc(description: "Specifies which page of results to return.")
    hasNextPage: Boolean @doc(description: "Has next page.")
    hasPreviousPage: Boolean @doc(description: "Has previous page.")
    startPage: Int @doc(description: "Start page.")
    endPage: Int @doc(description: "End page.")
}

input CartItemInput {
    mp_gift_wrap_wrap_id: Int
    mp_gift_wrap_message: String
}

interface CartItemInterface {
    mp_gift_wrap_data: GiftWrapDetailsOutput @doc(description: "Gift wrap information of the item.")
}
